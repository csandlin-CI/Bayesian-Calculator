[{"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/index.js":"1","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/App.js":"2","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/reportWebVitals.js":"3","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/API.jsx":"4","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/Home.jsx":"5","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/ApplicationViews.jsx":"6","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/ExperimentPage.jsx":"7","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/Metric.jsx":"8"},{"size":312,"mtime":1607984553585,"results":"9","hashOfConfig":"10"},{"size":747,"mtime":1608256148437,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1607708205283,"results":"12","hashOfConfig":"10"},{"size":2697,"mtime":1608256148437,"results":"13","hashOfConfig":"10"},{"size":788,"mtime":1608256148439,"results":"14","hashOfConfig":"10"},{"size":505,"mtime":1608256148438,"results":"15","hashOfConfig":"10"},{"size":1766,"mtime":1609803309608,"results":"16","hashOfConfig":"10"},{"size":2772,"mtime":1609864029489,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"buqby1",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/index.js",[],["37","38"],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/App.js",[],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/reportWebVitals.js",[],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/API.jsx",[],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/Home.jsx",[],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/ApplicationViews.jsx",["39","40","41"],"/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/ExperimentPage.jsx",["42","43"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { APIContext } from \"./API\";\nimport { useParams } from \"react-router-dom\";\nimport { Metric } from \"./Metric\";\n\nexport const ExperimentPage = () => {\n  let { id } = useParams();\n  const { singleTest, getSingleTest } = useContext(APIContext);\n  const { singleTestMeta, getSingleTestMeta } = useContext(APIContext);\n  const { bayCalc, getBayCalc } = useContext(APIContext);\n  const [metrics, setMetrics] = useState([]);\n\n  //Fetch the test results that match the id in the URL and experiment id in optimizely\n  useEffect(() => {\n    getSingleTest(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    getSingleTestMeta(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {}, [singleTest, singleTestMeta]);\n\n  // From the fetched experiment results, single out the metrics portion of the JSON and set in state\n  useEffect(() => {\n    const metrics = singleTest.metrics;\n    if (metrics !== undefined) {\n      setMetrics(metrics);\n    }\n  }, [singleTest]);\n\n  // useEffect(() => {\n  //   console.log(\"singleTest\", singleTest);\n  //   console.log(\"singleTestMeta\", singleTestMeta);\n  //   console.log(\"metrics\", metrics);\n  // }, [metrics]);\n\n  //   useEffect(() => {\n  //     getBayCalc(100, 10, 25, 100, 25, 50);\n  //     // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   }, []);\n\n  //   useEffect(() => {}, [bayCalc]);\n\n  return (\n    <>\n      <h2>{singleTestMeta.name}</h2>\n      <p>ID:{id}</p>\n      <p>\n        {singleTest.length === 0 ? \"Loading...\" : ` ${singleTest.end_time}`}\n      </p>\n      {metrics.map((met, index) => {\n        return <Metric key={met.event_id + index} metricData={met} />;\n      })}\n    </>\n  );\n};\n","/Users/csandlin/Documents/OneDrive - Compassion International/workspace/bayesian-results-app/src/components/Metric.jsx",["44","45","46","47"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { APIContext } from \"./API\";\nimport { Link } from \"react-router-dom\";\n\nexport const Metric = ({ metricData }) => {\n  useEffect(() => {\n    console.log(\"metricData\", metricData);\n  }, [metricData]);\n\n  function convPerVisitor(num) {\n    return +(Math.round(num + \"e+3\") + \"e-3\");\n  }\n\n  function convRate(num) {\n    let newNum = num * 100;\n    return +(Math.round(newNum + \"e+2\") + \"e-2\") + \"%\";\n  }\n\n  function generateTableEl() {\n    let domList = [];\n\n    for (let i = 0; i < Object.keys(metricData.results).length - 1; i++) {\n      for (let key in metricData.results) {\n        // console.log(\n        //   `metricData | ${key} | ${metricData.name} | ${metricData.aggregator}`\n        // );\n        domList.push(\n          <tr key={metricData.results[key].rate + i}>\n            <td>{metricData.results[key].name}</td>\n\n            <td>\n              {metricData.results[key].value}\n              <br></br>\n              {metricData.results[key].samples}\n            </td>\n            <td>\n              {metricData.aggregator === \"unique\"\n                ? convRate(metricData.results[key].rate)\n                : convPerVisitor(metricData.results[key].rate)}\n            </td>\n            <td>\n              {metricData.results[key].hasOwnProperty(\"lift\") &&\n              metricData.results[key].lift.lift_status === \"better\"\n                ? \"+\"\n                : \"\"}\n              {metricData.results[key].hasOwnProperty(\"lift\")\n                ? convRate(metricData.results[key].lift.value)\n                : \"â€”\"}\n            </td>\n          </tr>\n        );\n      }\n    }\n    domList.reverse();\n    return domList;\n  }\n\n  return (\n    <>\n      <h4 className=\"metric-title\">\n        {metricData.event_id !== undefined ? (\n          <>{metricData.name}</>\n        ) : (\n          <>{null}</>\n        )}\n      </h4>\n      <p className=\"metric-description\">\n        Increase in\n        <em>\n          {metricData.aggregator === \"unique\" ? \" unique\" : \" total\"}\n          {\" conversions\"}\n        </em>{\" \"}\n        per visitor for {metricData.name} event\n      </p>\n\n      <table className=\"metric-table\">\n        <thead>\n          <tr>\n            <th> </th>\n            <th>\n              Unique Conversions<br></br>Visitors\n            </th>\n            <th>\n              {metricData.aggregator === \"unique\"\n                ? \"Conversion Rate\"\n                : \"Conversions Per Visitor\"}\n            </th>\n            <th>\n              Improvement<br></br>Bayesian Improvement\n            </th>\n            <th>\n              Stat Sig<br></br>Bayesian Stat Sig\n            </th>\n          </tr>\n        </thead>\n        <tbody>{generateTableEl()}</tbody>\n      </table>\n    </>\n  );\n};\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":2,"column":17,"nodeType":"54","messageId":"55","endLine":2,"endColumn":23},{"ruleId":"52","severity":1,"message":"57","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":20},{"ruleId":"52","severity":1,"message":"58","line":10,"column":11,"nodeType":"54","messageId":"55","endLine":10,"endColumn":18},{"ruleId":"52","severity":1,"message":"59","line":10,"column":20,"nodeType":"54","messageId":"55","endLine":10,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":27},{"ruleId":"52","severity":1,"message":"60","line":1,"column":40,"nodeType":"54","messageId":"55","endLine":1,"endColumn":48},{"ruleId":"52","severity":1,"message":"57","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":20},{"ruleId":"52","severity":1,"message":"61","line":3,"column":10,"nodeType":"54","messageId":"55","endLine":3,"endColumn":14},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'APIContext' is defined but never used.","'bayCalc' is assigned a value but never used.","'getBayCalc' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]